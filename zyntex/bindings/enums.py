from enum import Enum


# pylint: disable=invalid-name


class NodeTag(Enum):
    """
    Bindings to the Zig `std.zig.Ast.Node.Tag` enum.
    Ref: https://github.com/ziglang/zig/blob/0.15.1/lib/std/zig/Ast.zig#L3089

    These enum values correspond to the numeric values returned by Zig parsing API.
    """
    ROOT = 0
    TEST_DECL = 1
    GLOBAL_VAR_DECL = 2
    LOCAL_VAR_DECL = 3
    SIMPLE_VAR_DECL = 4
    ALIGNED_VAR_DECL = 5
    ERRDEFER = 6
    DEFER = 7
    CATCH = 8
    FIELD_ACCESS = 9
    UNWRAP_OPTIONAL = 10
    EQUAL_EQUAL = 11
    BANG_EQUAL = 12
    LESS_THAN = 13
    GREATER_THAN = 14
    LESS_OR_EQUAL = 15
    GREATER_OR_EQUAL = 16
    ASSIGN_MUL = 17
    ASSIGN_DIV = 18
    ASSIGN_MOD = 19
    ASSIGN_ADD = 20
    ASSIGN_SUB = 21
    ASSIGN_SHL = 22
    ASSIGN_SHL_SAT = 23
    ASSIGN_SHR = 24
    ASSIGN_BIT_AND = 25
    ASSIGN_BIT_XOR = 26
    ASSIGN_BIT_OR = 27
    ASSIGN_MUL_WRAP = 28
    ASSIGN_ADD_WRAP = 29
    ASSIGN_SUB_WRAP = 30
    ASSIGN_MUL_SAT = 31
    ASSIGN_ADD_SAT = 32
    ASSIGN_SUB_SAT = 33
    ASSIGN = 34
    ASSIGN_DESTRUCTURE = 35
    MERGE_ERROR_SETS = 36
    MUL = 37
    DIV = 38
    MOD = 39
    ARRAY_MULT = 40
    MUL_WRAP = 41
    MUL_SAT = 42
    ADD = 43
    SUB = 44
    ARRAY_CAT = 45
    ADD_WRAP = 46
    SUB_WRAP = 47
    ADD_SAT = 48
    SUB_SAT = 49
    SHL = 50
    SHL_SAT = 51
    SHR = 52
    BIT_AND = 53
    BIT_XOR = 54
    BIT_OR = 55
    OR_ELSE = 56
    BOOL_AND = 57
    BOOL_OR = 58
    BOOL_NOT = 59
    NEGATION = 60
    BIT_NOT = 61
    NEGATION_WRAP = 62
    ADDRESS_OF = 63
    TRY = 64
    OPTIONAL_TYPE = 65
    ARRAY_TYPE = 66
    ARRAY_TYPE_SENTINEL = 67
    PTR_TYPE_ALIGNED = 68
    PTR_TYPE_SENTINEL = 69
    PTR_TYPE = 70
    PTR_TYPE_BIT_RANGE = 71
    SLICE_OPEN = 72
    SLICE = 73
    SLICE_SENTINEL = 74
    DEREF = 75
    ARRAY_ACCESS = 76
    ARRAY_INIT_ONE = 77
    ARRAY_INIT_ONE_COMMA = 78
    ARRAY_INIT_DOT_TWO = 79
    ARRAY_INIT_DOT_TWO_COMMA = 80
    ARRAY_INIT_DOT = 81
    ARRAY_INIT_DOT_COMMA = 82
    ARRAY_INIT = 83
    ARRAY_INIT_COMMA = 84
    STRUCT_INIT_ONE = 85
    STRUCT_INIT_ONE_COMMA = 86
    STRUCT_INIT_DOT_TWO = 87
    STRUCT_INIT_DOT_TWO_COMMA = 88
    STRUCT_INIT_DOT = 89
    STRUCT_INIT_DOT_COMMA = 90
    STRUCT_INIT = 91
    STRUCT_INIT_COMMA = 92
    CALL_ONE = 93
    CALL_ONE_COMMA = 94
    CALL = 95
    CALL_COMMA = 96
    SWITCH = 97
    SWITCH_COMMA = 98
    SWITCH_CASE_ONE = 99
    SWITCH_CASE_INLINE_ONE = 100
    SWITCH_CASE = 101
    SWITCH_CASE_INLINE = 102
    SWITCH_RANGE = 103
    WHILE_SIMPLE = 104
    WHILE_CONT = 105
    WHILE = 106
    FOR_SIMPLE = 107
    FOR = 108
    FOR_RANGE = 109
    IF_SIMPLE = 110
    IF = 111
    SUSPEND = 112
    RESUME = 113
    CONTINUE = 114
    BREAK = 115
    RETURN = 116
    FN_PROTO_SIMPLE = 117
    FN_PROTO_MULTI = 118
    FN_PROTO_ONE = 119
    FN_PROTO = 120
    FN_DECL = 121
    ANYFRAME_TYPE = 122
    ANYFRAME_LITERAL = 123
    CHAR_LITERAL = 124
    NUMBER_LITERAL = 125
    UNREACHABLE_LITERAL = 126
    IDENTIFIER = 127
    ENUM_LITERAL = 128
    STRING_LITERAL = 129
    MULTILINE_STRING_LITERAL = 130
    GROUPED_EXPRESSION = 131
    BUILTIN_CALL_TWO = 132
    BUILTIN_CALL_TWO_COMMA = 133
    BUILTIN_CALL = 134
    BUILTIN_CALL_COMMA = 135
    ERROR_SET_DECL = 136
    CONTAINER_DECL = 137
    CONTAINER_DECL_TRAILING = 138
    CONTAINER_DECL_TWO = 139
    CONTAINER_DECL_TWO_TRAILING = 140
    CONTAINER_DECL_ARG = 141
    CONTAINER_DECL_ARG_TRAILING = 142
    TAGGED_UNION = 143
    TAGGED_UNION_TRAILING = 144
    TAGGED_UNION_TWO = 145
    TAGGED_UNION_TWO_TRAILING = 146
    TAGGED_UNION_ENUM_TAG = 147
    TAGGED_UNION_ENUM_TAG_TRAILING = 148
    CONTAINER_FIELD_INIT = 149
    CONTAINER_FIELD_ALIGN = 150
    CONTAINER_FIELD = 151
    COMPTIME = 152
    NOSUSPEND = 153
    BLOCK_TWO = 154
    BLOCK_TWO_SEMICOLON = 155
    BLOCK = 156
    BLOCK_SEMICOLON = 157
    ASM_SIMPLE = 158
    ASM_LEGACY = 159
    ASM = 160
    ASM_OUTPUT = 161
    ASM_INPUT = 162
    ERROR_VALUE = 163
    ERROR_UNION = 164


class TokenTag(Enum):
    """
    Bindings to the Zig `std.zig.tokenizer.Token.Tag` enum.
    Ref: https://github.com/ziglang/zig/blob/0.15.1/lib/std/zig/tokenizer.zig#L65
    """
    INVALID = 0
    INVALID_PERIODASTERISKS = 1
    IDENTIFIER = 2
    STRING_LITERAL = 3
    MULTILINE_STRING_LITERAL_LINE = 4
    CHAR_LITERAL = 5
    EOF = 6
    BUILTIN = 7
    BANG = 8
    PIPE = 9
    PIPE_PIPE = 10
    PIPE_EQUAL = 11
    EQUAL = 12
    EQUAL_EQUAL = 13
    EQUAL_ANGLE_BRACKET_RIGHT = 14
    BANG_EQUAL = 15
    L_PAREN = 16
    R_PAREN = 17
    SEMICOLON = 18
    PERCENT = 19
    PERCENT_EQUAL = 20
    L_BRACE = 21
    R_BRACE = 22
    L_BRACKET = 23
    R_BRACKET = 24
    PERIOD = 25
    PERIOD_ASTERISK = 26
    ELLIPSIS2 = 27
    ELLIPSIS3 = 28
    CARET = 29
    CARET_EQUAL = 30
    PLUS = 31
    PLUS_PLUS = 32
    PLUS_EQUAL = 33
    PLUS_PERCENT = 34
    PLUS_PERCENT_EQUAL = 35
    PLUS_PIPE = 36
    PLUS_PIPE_EQUAL = 37
    MINUS = 38
    MINUS_EQUAL = 39
    MINUS_PERCENT = 40
    MINUS_PERCENT_EQUAL = 41
    MINUS_PIPE = 42
    MINUS_PIPE_EQUAL = 43
    ASTERISK = 44
    ASTERISK_EQUAL = 45
    ASTERISK_ASTERISK = 46
    ASTERISK_PERCENT = 47
    ASTERISK_PERCENT_EQUAL = 48
    ASTERISK_PIPE = 49
    ASTERISK_PIPE_EQUAL = 50
    ARROW = 51
    COLON = 52
    SLASH = 53
    SLASH_EQUAL = 54
    COMMA = 55
    AMPERSAND = 56
    AMPERSAND_EQUAL = 57
    QUESTION_MARK = 58
    ANGLE_BRACKET_LEFT = 59
    ANGLE_BRACKET_LEFT_EQUAL = 60
    ANGLE_BRACKET_ANGLE_BRACKET_LEFT = 61
    ANGLE_BRACKET_ANGLE_BRACKET_LEFT_EQUAL = 62
    ANGLE_BRACKET_ANGLE_BRACKET_LEFT_PIPE = 63
    ANGLE_BRACKET_ANGLE_BRACKET_LEFT_PIPE_EQUAL = 64
    ANGLE_BRACKET_RIGHT = 65
    ANGLE_BRACKET_RIGHT_EQUAL = 66
    ANGLE_BRACKET_ANGLE_BRACKET_RIGHT = 67
    ANGLE_BRACKET_ANGLE_BRACKET_RIGHT_EQUAL = 68
    TILDE = 69
    NUMBER_LITERAL = 70
    DOC_COMMENT = 71
    CONTAINER_DOC_COMMENT = 72
    KEYWORD_ADDRSPACE = 73
    KEYWORD_ALIGN = 74
    KEYWORD_ALLOWZERO = 75
    KEYWORD_AND = 76
    KEYWORD_ANYFRAME = 77
    KEYWORD_ANYTYPE = 78
    KEYWORD_ASM = 79
    KEYWORD_BREAK = 80
    KEYWORD_CALLCONV = 81
    KEYWORD_CATCH = 82
    KEYWORD_COMPTIME = 83
    KEYWORD_CONST = 84
    KEYWORD_CONTINUE = 85
    KEYWORD_DEFER = 86
    KEYWORD_ELSE = 87
    KEYWORD_ENUM = 88
    KEYWORD_ERRDEFER = 89
    KEYWORD_ERROR = 90
    KEYWORD_EXPORT = 91
    KEYWORD_EXTERN = 92
    KEYWORD_FN = 93
    KEYWORD_FOR = 94
    KEYWORD_IF = 95
    KEYWORD_INLINE = 96
    KEYWORD_NOALIAS = 97
    KEYWORD_NOINLINE = 98
    KEYWORD_NOSUSPEND = 99
    KEYWORD_OPAQUE = 100
    KEYWORD_OR = 101
    KEYWORD_ORELSE = 102
    KEYWORD_PACKED = 103
    KEYWORD_PUB = 104
    KEYWORD_RESUME = 105
    KEYWORD_RETURN = 106
    KEYWORD_LINKSECTION = 107
    KEYWORD_STRUCT = 108
    KEYWORD_SUSPEND = 109
    KEYWORD_SWITCH = 110
    KEYWORD_TEST = 111
    KEYWORD_THREADLOCAL = 112
    KEYWORD_TRY = 113
    KEYWORD_UNION = 114
    KEYWORD_UNREACHABLE = 115
    KEYWORD_VAR = 116
    KEYWORD_VOLATILE = 117
    KEYWORD_WHILE = 118


class ErrorTag(Enum):
    """
    Bindings to the Zig `std.zig.Ast.Error.Tag` enum.
    Ref: https://github.com/ziglang/zig/blob/0.15.1/lib/std/zig/Ast.zig#L2935

    These enum values correspond to the error tag identifiers returned by the Zig parser.
    Used to indicate specific kinds of syntax or semantic errors encountered during parsing.
    """
    ASTERISK_AFTER_PTR_DEREF = 0
    CHAINED_COMPARISON_OPERATORS = 1
    DECL_BETWEEN_FIELDS = 2
    EXPECTED_BLOCK = 3
    EXPECTED_BLOCK_OR_ASSIGNMENT = 4
    EXPECTED_BLOCK_OR_EXPR = 5
    EXPECTED_BLOCK_OR_FIELD = 6
    EXPECTED_CONTAINER_MEMBERS = 7
    EXPECTED_EXPR = 8
    EXPECTED_EXPR_OR_ASSIGNMENT = 9
    EXPECTED_EXPR_OR_VAR_DECL = 10
    EXPECTED_FN = 11
    EXPECTED_INLINABLE = 12
    EXPECTED_LABELABLE = 13
    EXPECTED_PARAM_LIST = 14
    EXPECTED_PREFIX_EXPR = 15
    EXPECTED_PRIMARY_TYPE_EXPR = 16
    EXPECTED_PUB_ITEM = 17
    EXPECTED_RETURN_TYPE = 18
    EXPECTED_SEMI_OR_ELSE = 19
    EXPECTED_SEMI_OR_LBRACE = 20
    EXPECTED_STATEMENT = 21
    EXPECTED_SUFFIX_OP = 22
    EXPECTED_TYPE_EXPR = 23
    EXPECTED_VAR_DECL = 24
    EXPECTED_VAR_DECL_OR_FN = 25
    EXPECTED_LOOP_PAYLOAD = 26
    EXPECTED_CONTAINER = 27
    EXTERN_FN_BODY = 28
    EXTRA_ADDRSPACE_QUALIFIER = 29
    EXTRA_ALIGN_QUALIFIER = 30
    EXTRA_ALLOWZERO_QUALIFIER = 31
    EXTRA_CONST_QUALIFIER = 32
    EXTRA_VOLATILE_QUALIFIER = 33
    PTR_MOD_ON_ARRAY_CHILD_TYPE = 34
    INVALID_BIT_RANGE = 35
    SAME_LINE_DOC_COMMENT = 36
    UNATTACHED_DOC_COMMENT = 37
    TEST_DOC_COMMENT = 38
    COMPTIME_DOC_COMMENT = 39
    VARARGS_NONFINAL = 40
    EXPECTED_CONTINUE_EXPR = 41
    EXPECTED_SEMI_AFTER_DECL = 42
    EXPECTED_SEMI_AFTER_STMT = 43
    EXPECTED_COMMA_AFTER_FIELD = 44
    EXPECTED_COMMA_AFTER_ARG = 45
    EXPECTED_COMMA_AFTER_PARAM = 46
    EXPECTED_COMMA_AFTER_INITIALIZER = 47
    EXPECTED_COMMA_AFTER_SWITCH_PRONG = 48
    EXPECTED_COMMA_AFTER_FOR_OPERAND = 49
    EXPECTED_COMMA_AFTER_CAPTURE = 50
    EXPECTED_INITIALIZER = 51
    MISMATCHED_BINARY_OP_WHITESPACE = 52
    INVALID_AMPERSAND_AMPERSAND = 53
    C_STYLE_CONTAINER = 54
    EXPECTED_VAR_CONST = 55
    WRONG_EQUAL_VAR_DECL = 56
    VAR_CONST_DECL = 57
    EXTRA_FOR_CAPTURE = 58
    FOR_INPUT_NOT_CAPTURED = 59
    ZIG_STYLE_CONTAINER = 60
    PREVIOUS_FIELD = 61
    NEXT_FIELD = 62
    EXPECTED_TOKEN = 63
    INVALID_BYTE = 64


class PrimitiveType(Enum):
    """
    Bindings for Zig primitive types.
    Ref: https://ziglang.org/documentation/0.15.1/#Primitive-Types
    """
    i8 = "i8"
    i16 = "i16"
    i32 = "i32"
    i64 = "i64"
    i128 = "i128"

    u8 = "u8"
    u16 = "u16"
    u32 = "u32"
    u64 = "u64"
    u128 = "u128"

    isize = "isize"
    usize = "usize"

    c_char = "c_char"
    c_short = "c_short"
    c_ushort = "c_ushort"

    c_int = "c_int"
    c_uint = "c_uint"
    c_long = "c_long"
    c_ulong = "c_ulong"

    c_longlong = "c_longlong"
    c_ulonglong = "c_ulonglong"
    c_longdouble = "c_longdouble"

    f16 = "f16"
    f32 = "f32"
    f64 = "f64"
    f80 = "f80"
    f128 = "f128"

    bool = "bool"
    anyopaque = "anyopaque"
    void = "void"
    noreturn = "noreturn"
    type = "type"
    anyerror = "anyerror"
    comptime_int = "comptime_int"
    comptime_float = "comptime_float"
